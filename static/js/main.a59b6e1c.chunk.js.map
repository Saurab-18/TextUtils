{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","about","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","LowerCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.a59b6e1c.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n// import { Link } from 'react-router-dom'\n\n\nexport default function Navbar(props) {\n  return (\n   \n          <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n  <div className=\"container-fluid\">\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n        <li className=\"nav-item\">\n          {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n        </li>\n        <li className=\"nav-item\">\n          {/* <Link className=\"nav-link\" to=\"/about\">{props.about}</Link> */}\n          <a className=\"nav-link\" href=\"/about\">{props.about}</a>\n        </li>\n      </ul>\n      {/* <form className=\"d-flex\" role=\"search\">\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\n      </form> */}\n      <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n</div>\n    </div>\n  </div>\n</nav>\n   \n  )\n}\n\nNavbar.propTypes={\n    title:PropTypes.string.isRequired,\n    about:PropTypes.string.isRequired\n}\n\n\n// Navbar.defaultProps={\n//     title:\" Default title\",\n//     about:\"Default About\"\n// }\n\n\n","import React, {useState} from 'react'\n\nexport default function TextForm(props) {\n    const handleUpClick = () =>{\n        // console.log(\"Uppercase was clicked\" + text)\n        let newText = text.toUpperCase();\n        setText(newText)\n        props.showAlert(\"Converted to Uppercase!\", 'sucess')\n    }\n    const handleLoClick = () =>{\n        let LowerCase =text.toLowerCase();\n        setText(LowerCase)\n        props.showAlert(\"Converted to Lowercase!\", 'sucess')\n\n    }\n    const handleOnChange = (event) =>{\n        setText(event.target.value)\n    }\n    const handleCopy = () =>{\n        let text = document.getElementById(\"myBox\")\n        text.select();\n        navigator.clipboard.writeText(text.value);\n\n    }\n\n    const handleExtraSpaces = () =>{\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"))\n    }\n     \n    const handleClearText =()=>{\n        let newText='';\n        setText(newText)\n    }\n\n    const [text, setText] = useState(\"Enter text here\");\n    return (\n        <>\n        <div className=\"container\" style={{color :props.mode=== 'dark'?'white':'#042743'}}>   \n        <h1>{props.heading}</h1>\n        <div className=\"mb-3\">\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor :props.mode=== 'dark'?'grey':'white', color :props.mode=== 'dark'?'white':'#042743'}} id=\"myBox\" rows=\"12\"></textarea>\n        </div>\n        <button className=\"btn-primary mx-1\" onClick={handleUpClick}>Convert To UpperCase</button>\n        <button className=\"btn-primary mx-1\" onClick={handleLoClick}>Convert To LowerCase</button>\n        <button className=\"btn-primary mx-1\" onClick={handleClearText}>Clear Text</button>\n        <button className=\"btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\n        <button className=\"btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra spaces</button>\n        </div>\n        <div className=\"container my-2\" style={{color :props.mode=== 'dark'?'white':'#042743'}}>\n            <h1>Your text Summary</h1>\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\n            <p>{0.008*text.split(\" \").length} are minutes taken to read {text.split(\" \").length} words</p>\n            <h2>preview</h2>\n            <p>{text.length>0?text:\"Enter something in the text box above to preview it here\"}</p>\n        </div>\n        </>\n    \n  )\n    \n}\n","import React from 'react'\n\nexport default function Alert(props) {\n  \n  return (\n   props.alert && <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\n     <strong>{props.alert.type}</strong>:{props.alert.msg}\n  </div>\n  \n  )\n}\n","import { useState } from 'react';\nimport './App.css';\n// import About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport Alert from './Components/Alert';\n// import { Router, Routes } from 'react-router-dom';\n// import { Route } from 'router';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode , setMode] =useState(\"light\")\n  const [alert , setAlert]=useState(\"null\")\n\n  const showAlert = (message,type) =>{\n   setAlert({ \n    msg: message,\n    type:type\n  })\n  setTimeout(()=>{\n    setAlert(null)\n  },1500)\n  }\n\n const toggleMode = () =>{\n  if(mode === \"light\"){\n    setMode(\"dark\")\n    document.body.style.backgroundColor =\"#042743\"\n    showAlert(\"Dark mod has been enabled\",\"sucess\")\n    document.title=\"TextUtils - Dark Mode\"\n  }\n  else{\n    setMode(\"light\")\n    document.body.style.backgroundColor =\"white\"\n    showAlert(\"light mod has been enabled\",\"sucess\")\n    document.title=\"TextUtils - light Mode\"\n  }\n\n}\n\n  return (   \n  <>\n    {/* <Router> */}\n     <Navbar title=\"TextUtils\" about='About' mode={mode} toggleMode={toggleMode}/> \n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n       {/* <Routes> */}\n         {/* <Route path =\"/about\" element={ <About/>}/> */}\n         {/* <Route path =\"/\" element={}/> */}\n         <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode} />\n       {/* </Routes> */}\n      </div>\n    {/* </Router> */}\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}